-- Drop existing tables (if any)
DROP TABLE IF EXISTS Employee;
DROP TABLE IF EXISTS Department;
DROP TABLE IF EXISTS Students;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Project;
DROP TABLE IF EXISTS Employee_Project;


CREATE TABLE Department (
    id INTEGER PRIMARY KEY,
    name TEXT
);

CREATE TABLE Employee (
    id INTEGER PRIMARY KEY,
    name TEXT,
    salary INTEGER,
    dept_id INTEGER,
    manager_id INTEGER,
    joining_date TEXT
);

-- Create Students table
CREATE TABLE Students (
    id INTEGER PRIMARY KEY,
    name TEXT
);

-- Create Users table
CREATE TABLE Users (
    id INTEGER PRIMARY KEY,
    email TEXT
);

-- Create Project table
CREATE TABLE Project (
    id INTEGER PRIMARY KEY,
    name TEXT
);

-- Create Employee_Project table
CREATE TABLE Employee_Project (
    employee_id INTEGER,
    project_id INTEGER
);

-- Insert data into Department
INSERT INTO Department VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Marketing');

-- Insert data into Employee
INSERT INTO Employee VALUES
(1, 'Alice', 5000, 1, NULL, '2024-12-01'),
(2, 'Bob', 8000, 2, 1, '2025-06-01'),
(3, 'Charlie', 7500, 2, 1, '2025-07-01'),
(4, 'David', 4000, 3, 1, '2025-01-01'),
(5, 'Eva', 6000, 1, 2, '2025-05-01'),
(6, 'Frank', 5500, 1, 2, '2025-03-01'),
(7, 'Grace', 9500, 2, 3, '2024-11-01'),
(8, 'Helen', 9000, 3, NULL, '2025-04-15');

-- Insert data into Students
INSERT INTO Students VALUES
(1, 'John'),
(2, 'Jane'),
(3, 'John'),
(4, 'Mike');

-- Insert data into Users
INSERT INTO Users VALUES
(1, 'user1@example.com'),
(2, 'user2@example.com'),
(3, 'user1@example.com');

-- Insert data into Project
INSERT INTO Project VALUES
(1, 'Alpha'),
(2, 'Beta'),
(3, 'Gamma');

-- Insert data into Employee_Project
INSERT INTO Employee_Project VALUES
(2, 1),
(3, 1),
(5, 2);

-- 4. Find duplicate student names
SELECT name, COUNT(*) AS count
FROM Students
GROUP BY name
HAVING COUNT(*) > 1;

-- 5. Top 3 salaries in each department
SELECT id, name, salary, dept_id
FROM (
    SELECT *, DENSE_RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS rnk
    FROM Employee
) 
WHERE rnk <= 3;

-- 6. 4th highest salary
SELECT name, salary
FROM (
    SELECT name, salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS rnk
    FROM Employee
)
WHERE rnk = 4;

-- 7. Count employees per department
SELECT d.name AS Department, COUNT(e.id) AS EmployeeCount
FROM Department d
LEFT JOIN Employee e ON d.id = e.dept_id
GROUP BY d.name;

-- 8. Employees who joined in last 3 months
SELECT *
FROM Employee
WHERE joining_date >= date('now', '-3 months');

-- 9. Duplicate emails
SELECT email, COUNT(*) AS count
FROM Users
GROUP BY email
HAVING COUNT(*) > 1;

-- 10. Highest paid employee per department
SELECT *
FROM (
    SELECT *, RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS rnk
    FROM Employee
)
WHERE rnk = 1;

-- 11. Employees without managers
SELECT *
FROM Employee
WHERE manager_id IS NULL;

-- 12. Projects with no employees
SELECT p.*
FROM Project p
LEFT JOIN Employee_Project ep ON p.id = ep.project_id
WHERE ep.project_id IS NULL;

-- 13. Cumulative salary by department
SELECT dept_id, name, salary,
       SUM(salary) OVER (PARTITION BY dept_id ORDER BY salary) AS CumulativeSalary
FROM Employee;

-- 14. Retrieve all employees
SELECT * FROM Employee;

-- 15. Unique department IDs
SELECT DISTINCT dept_id FROM Employee;

-- 16. Employee count and average salary per department
SELECT dept_id, COUNT(*) AS emp_count, AVG(salary) AS avg_salary
FROM Employee
GROUP BY dept_id;

-- 17. Managers managing more than 3 employees
SELECT manager_id, COUNT(*) AS team_size
FROM Employee
WHERE manager_id IS NOT NULL
GROUP BY manager_id
HAVING COUNT(*) > 3;

-- 18. Running total of salary by department
SELECT dept_id, name, salary,
       SUM(salary) OVER (PARTITION BY dept_id ORDER BY id) AS RunningTotal
FROM Employee;

-- 19. Rank employees by salary per department
SELECT name, dept_id, salary,
       RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS salary_rank
FROM Employee;

-- 20. Gaps in employee IDs
SELECT e1.id + 1 AS MissingID
FROM Employee e1
LEFT JOIN Employee e2 ON e1.id + 1 = e2.id
WHERE e2.id IS NULL;
